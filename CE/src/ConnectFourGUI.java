import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

/**
 * Provides the view and controller for the Connect Four Game
 * @author Eric Smith
 * @author Lawrence Stephenson
 * @author Sriman Bhadri
 * @author Trung Le
 */
public class ConnectFourGUI extends JFrame implements ActionListener {

    /** Width of GUI Window */
    public static final int WIDTH = 700;
    
    /** Height of GUI Window */
    public static final int HEIGHT = 650;

    /** X Location for GUI */
    public static final int X = 100;

    /** Y Location for GUI */
    public static final int Y = 20;

    /** Normal bold font */
    public static final Font NORMAL_BOLD = new Font("Courier", 1, 16);
    
    /** Normal font*/
    public static final Font NORMAL = new Font("Courier", 0, 16);

    /** Symbol buttons */
    private JButton[][] gridButtons;
    
    /** Panel to display grid of symbols */
    private JPanel gridPanel;
    
    /** Play button */
    private JButton playButton;
    
    /** Quit button */
    private JButton quitButton;
    
    /** Panel to hold game buttons */
    private JPanel buttonPanel;

    /** ConnectFour instance */
    private ConnectFour game;

    /** Instructions label */
    private JLabel instructionsLabel;
    
    /** Total score label */
    private JLabel totalScoreLabel;
    
    /** Number of misses label */
    private JLabel numberOfMissesLabel;
    
    /** Statistics panel */
    private JPanel statisticsPanel;
    
    /** Information (instructions and statistics) panel */
    private JPanel informationPanel;

    /** integer for how many tokens need to be connected */
    private int connect;

    /** current player */
    private int currentPlayer;


    /**
     * Creates GUI for playing Connect Four game
     * @param connect int for number of connected tokens
     */
    public ConnectFourGUI(int connect){
        this.connect = connect;
        setSize(WIDTH, HEIGHT);
        setLocation(X, Y);
        Container c = getContentPane();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        game = new ConnectFour(connect);

        informationPanel = new JPanel();
        informationPanel.setLayout(new BorderLayout());
        instructionsLabel = new 
            JLabel("Welcome to the ConnectFour -- Press PLAY to start a new game!");
        instructionsLabel.setFont(NORMAL);
        informationPanel.add(instructionsLabel, BorderLayout.NORTH);
        statisticsPanel = new JPanel();
        totalScoreLabel = new JLabel(game.getPlayerWins(1) + " : " + game.getPlayerWins(2));
        totalScoreLabel.setFont(NORMAL);
        statisticsPanel.add(totalScoreLabel);
        informationPanel.add(statisticsPanel, BorderLayout.CENTER);
        c.add(informationPanel,BorderLayout.NORTH);
        
        gridPanel = new JPanel(new GridLayout(game.getGameSize(), game.getGameSize()));
        gridButtons = new JButton[game.getGameSize()][game.getGameSize()];
        

        for (int i = 0; i < gridButtons.length; i++) {
            for (int j = 0; j < gridButtons[i].length; j++) {
                JButton button = new JButton("");
                gridButtons[i][j] = button;
                gridPanel.add(button);
            }
        }
        c.add(gridPanel,BorderLayout.CENTER);

        buttonPanel = new JPanel();
        playButton = new JButton("PLAY");
        playButton.addActionListener(this);
        quitButton = new JButton("QUIT");
        quitButton.addActionListener(this);
        buttonPanel.add(playButton);
        buttonPanel.add(quitButton);
        c.add(buttonPanel, BorderLayout.SOUTH);

        setVisible(true);

    }

    

    /**
     * Handles game play based on events generated by buttons
     * @param e event that controls game play.
     */
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == quitButton) {
            System.exit(1);
        } else if (e.getSource() == playButton) {
            //game.startNewRound();
            //game = new ConnectFour(connect);
            
            

            for (int i = 0; i < gridButtons.length; i++) {
                for (int j = 0; j < gridButtons[i].length; j++) {
                    gridButtons[i][j].addActionListener(this);
                    gridButtons[i][j].setText("");
                    gridButtons[i][j].setBackground(Color.WHITE);
                    gridButtons[i][j].setEnabled(false);
        
                }
            }

            for(int i = 0; i < gridButtons.length; i++){
                gridButtons[gridButtons.length - 1][i].setEnabled(true);
            }
            currentPlayer = 1;

            
        } else {
            if(!game.checkConnectFour() && !game.allOccupied()){
                for(int i = 0; i < gridButtons.length; i++){
                    for(int j = 0; j < gridButtons[i].length; j++){
                        if(gridButtons[i][j] == e.getSource()){
                            
                            if(currentPlayer == 2){
                                gridButtons[i][j].setBackground(Color.BLUE);
                                currentPlayer = 1;
                            } else {
                                gridButtons[i][j].setBackground(Color.RED);
                                currentPlayer = 2;
                            }
                            game.placePiece(j);
                            gridButtons[i][j].setOpaque(true);
                            gridButtons[i][j].setBorderPainted(false);
                            gridButtons[i][j].removeActionListener(this);
                            int x = i - 1;
                            if(i != 0){
                                gridButtons[x][j].setEnabled(true);
                            }

                            if (game.allOccupied()) {
                                instructionsLabel.setText("                                 TIE");
                                playButton.setText("PLAY");
                                totalScoreLabel.setText(game.getPlayerWins(1) + " : " + 
                                    game.getPlayerWins(2));
                            } else if (game.checkConnectFour()){
                                int currentPlayer2 = 1;
                                if(currentPlayer == 1){
                                    currentPlayer2 = 2;
                                }
                                instructionsLabel.setText("                            Player " + 
                                    currentPlayer2 + " Wins");
                                if(currentPlayer == 1){
                                    game.changeCurrentPlayer();
                                }
                                playButton.setText("PLAY");
                                if(currentPlayer == 1){
                                    game.getPlayerOne().increaseNumGamesWon();
                                } else if(currentPlayer == 2){
                                    game.getPlayerTwo().increaseNumGamesWon();
                                }
                                totalScoreLabel.setText(game.getPlayerWins(2) + 
                                    " : " + game.getPlayerWins(1));
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Starts ConnectFourGUI with 4 connected 
     * 
     * @param args command line argument, if args[0] is "-t", game is played in testing mode
     */
    public static void main(String[] args) {
        final int four = 4;

        if (args.length == 0) {
            new ConnectFourGUI(four); //Normal game mode
        } else if (args.length == 1 && Integer.parseInt(args[0]) >= four) {
            new ConnectFourGUI(Integer.parseInt(args[0]));
        } else {
            System.out.println("Usage: java ConnectFour [numberConnected]");
        }
        
    }



}